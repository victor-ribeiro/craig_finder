digraph "classes" {
rankdir=BT
charset="utf-8"
"deepcore.methods.cal.Cal" [color="black", fontcolor="black", label=<{deepcore.methods.cal.Cal|balance : bool<br ALIGN="LEFT"/>knn : list<br ALIGN="LEFT"/>metric : str<br ALIGN="LEFT"/>neighbors : int<br ALIGN="LEFT"/>pretrain_model : str<br ALIGN="LEFT"/>|calc_kl(knn, index)<br ALIGN="LEFT"/>find_knn()<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.contextualdiversity.ContextualDiversity" [color="black", fontcolor="black", label=<{deepcore.methods.contextualdiversity.ContextualDiversity|metric<br ALIGN="LEFT"/>|construct_matrix(index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.coresetmethod.CoresetMethod" [color="black", fontcolor="black", label=<{deepcore.methods.coresetmethod.CoresetMethod|args<br ALIGN="LEFT"/>coreset_size<br ALIGN="LEFT"/>dst_train<br ALIGN="LEFT"/>fraction : float<br ALIGN="LEFT"/>index : list<br ALIGN="LEFT"/>n_train<br ALIGN="LEFT"/>num_classes<br ALIGN="LEFT"/>random_seed : NoneType<br ALIGN="LEFT"/>|select()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.craig.Craig" [color="black", fontcolor="black", label=<{deepcore.methods.craig.Craig|balance : bool<br ALIGN="LEFT"/>embedding_dim<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|<I>after_epoch</I>()<br ALIGN="LEFT"/><I>after_loss</I>(outputs, loss, targets, batch_inds, epoch)<br ALIGN="LEFT"/><I>before_epoch</I>()<br ALIGN="LEFT"/><I>before_run</I>()<br ALIGN="LEFT"/><I>before_train</I>()<br ALIGN="LEFT"/>calc_gradient(index)<br ALIGN="LEFT"/>calc_weights(matrix, result)<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.deepfool.DeepFool" [color="black", fontcolor="black", label=<{deepcore.methods.deepfool.DeepFool|balance : bool<br ALIGN="LEFT"/>max_iter : int<br ALIGN="LEFT"/>|deep_fool(inputs)<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.earlytrain.EarlyTrain" [color="black", fontcolor="black", label=<{deepcore.methods.earlytrain.EarlyTrain|coreset_size<br ALIGN="LEFT"/>criterion : NoneType<br ALIGN="LEFT"/>dst_pretrain_dict : dict<br ALIGN="LEFT"/>dst_test : NoneType<br ALIGN="LEFT"/>dst_train<br ALIGN="LEFT"/>epochs : int<br ALIGN="LEFT"/>fraction_pretrain : float<br ALIGN="LEFT"/>if_dst_pretrain<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>model_optimizer : Adam, SGD<br ALIGN="LEFT"/>n_pretrain<br ALIGN="LEFT"/>n_pretrain_size<br ALIGN="LEFT"/>n_train<br ALIGN="LEFT"/>specific_model : NoneType<br ALIGN="LEFT"/>torchvision_pretrain : bool<br ALIGN="LEFT"/>train_indx<br ALIGN="LEFT"/>|<I>after_epoch</I>()<br ALIGN="LEFT"/><I>after_loss</I>(outputs, loss, targets, batch_inds, epoch)<br ALIGN="LEFT"/><I>before_epoch</I>()<br ALIGN="LEFT"/><I>before_run</I>()<br ALIGN="LEFT"/><I>before_train</I>()<br ALIGN="LEFT"/><I>finish_run</I>()<br ALIGN="LEFT"/><I>finish_train</I>()<br ALIGN="LEFT"/><I>num_classes_mismatch</I>()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>test(epoch)<br ALIGN="LEFT"/>train(epoch, list_of_train_idx)<br ALIGN="LEFT"/><I>while_update</I>(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.forgetting.Forgetting" [color="black", fontcolor="black", label=<{deepcore.methods.forgetting.Forgetting|balance : bool<br ALIGN="LEFT"/>correct : float<br ALIGN="LEFT"/>elapsed_time : int<br ALIGN="LEFT"/>forgetting_events<br ALIGN="LEFT"/>last_acc<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>total : float<br ALIGN="LEFT"/>train_loss : float<br ALIGN="LEFT"/>|after_epoch()<br ALIGN="LEFT"/>after_loss(outputs, loss, targets, batch_inds, epoch)<br ALIGN="LEFT"/>before_epoch()<br ALIGN="LEFT"/>before_run()<br ALIGN="LEFT"/>before_train()<br ALIGN="LEFT"/><I>finish_run</I>()<br ALIGN="LEFT"/>get_hms(seconds)<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.full.Full" [color="black", fontcolor="black", label=<{deepcore.methods.full.Full|n_train<br ALIGN="LEFT"/>|select()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.glister.Glister" [color="black", fontcolor="black", label=<{deepcore.methods.glister.Glister|balance : bool<br ALIGN="LEFT"/>dst_val : NoneType<br ALIGN="LEFT"/>embedding_dim<br ALIGN="LEFT"/>eta : NoneType<br ALIGN="LEFT"/>init_emb : list<br ALIGN="LEFT"/>init_out : list<br ALIGN="LEFT"/>init_y : list<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>n_val<br ALIGN="LEFT"/>train_grads<br ALIGN="LEFT"/>train_indx<br ALIGN="LEFT"/>val_grads<br ALIGN="LEFT"/>val_indx<br ALIGN="LEFT"/>|calc_gradient(index, val, record_val_detail)<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>update_val_gradients(new_selection, selected_for_train)<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.gradmatch.GradMatch" [color="black", fontcolor="black", label=<{deepcore.methods.gradmatch.GradMatch|balance : bool<br ALIGN="LEFT"/>dst_val : NoneType<br ALIGN="LEFT"/>embedding_dim<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|calc_gradient(index, val)<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>orthogonal_matching_pursuit(A, b, budget: int, lam: float)<br ALIGN="LEFT"/>orthogonal_matching_pursuit_np(A, b, budget: int, lam: float)<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.grand.GraNd" [color="black", fontcolor="black", label=<{deepcore.methods.grand.GraNd|balance : bool<br ALIGN="LEFT"/>coreset_size<br ALIGN="LEFT"/>cur_repeat<br ALIGN="LEFT"/>epochs : int<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>n_train<br ALIGN="LEFT"/>norm_matrix<br ALIGN="LEFT"/>norm_mean<br ALIGN="LEFT"/>random_seed<br ALIGN="LEFT"/>repeat : int<br ALIGN="LEFT"/>specific_model : NoneType<br ALIGN="LEFT"/>|before_run()<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.herding.Herding" [color="black", fontcolor="black", label=<{deepcore.methods.herding.Herding|balance : bool<br ALIGN="LEFT"/>construct_matrix<br ALIGN="LEFT"/>emb_dim<br ALIGN="LEFT"/>metric : str<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>run<br ALIGN="LEFT"/>|before_run()<br ALIGN="LEFT"/>construct_matrix(index)<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>herding(matrix, budget: int, index)<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.kcentergreedy.kCenterGreedy" [color="black", fontcolor="black", label=<{deepcore.methods.kcentergreedy.kCenterGreedy|already_selected : ndarray<br ALIGN="LEFT"/>balance : bool<br ALIGN="LEFT"/>construct_matrix<br ALIGN="LEFT"/>emb_dim<br ALIGN="LEFT"/>metric : str<br ALIGN="LEFT"/>min_distances : NoneType<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>run<br ALIGN="LEFT"/>|before_run()<br ALIGN="LEFT"/>construct_matrix(index)<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>old_construct_matrix(index)<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_function.FacilityLocation" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_function.FacilityLocation|all_idx : ndarray<br ALIGN="LEFT"/>cur_max : ndarray<br ALIGN="LEFT"/>if_columns_calculated : ndarray<br ALIGN="LEFT"/>sim_matrix : ndarray<br ALIGN="LEFT"/>|calc_gain(idx_gain, selected)<br ALIGN="LEFT"/>calc_gain_batch(idx_gain, selected)<br ALIGN="LEFT"/>update_state(new_selection, total_selected)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_function.GraphCut" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_function.GraphCut|all_idx : ndarray<br ALIGN="LEFT"/>if_columns_calculated : ndarray<br ALIGN="LEFT"/>lam : float<br ALIGN="LEFT"/>sim_matrix : ndarray<br ALIGN="LEFT"/>sim_matrix_cols_sum : ndarray<br ALIGN="LEFT"/>|calc_gain(idx_gain, selected)<br ALIGN="LEFT"/><I>update_state</I>(new_selection, total_selected)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_function.LogDeterminant" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_function.LogDeterminant|all_idx : ndarray<br ALIGN="LEFT"/>if_columns_calculated : ndarray<br ALIGN="LEFT"/>sim_matrix : ndarray<br ALIGN="LEFT"/>|calc_gain(idx_gain, selected)<br ALIGN="LEFT"/><I>update_state</I>(new_selection, total_selected)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_function.SubmodularFunction" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_function.SubmodularFunction|already_selected : list<br ALIGN="LEFT"/>index<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>similarity_kernel<br ALIGN="LEFT"/>similarity_matrix : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_optimizer.ApproximateLazyGreedy" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_optimizer.ApproximateLazyGreedy|beta : float<br ALIGN="LEFT"/>|select(gain_function, update_state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_optimizer.LazyGreedy" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_optimizer.LazyGreedy|<br ALIGN="LEFT"/>|select(gain_function, update_state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_optimizer.NaiveGreedy" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_optimizer.NaiveGreedy|<br ALIGN="LEFT"/>|select(gain_function, update_state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_optimizer.StochasticGreedy" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_optimizer.StochasticGreedy|epsilon : float<br ALIGN="LEFT"/>|select(gain_function, update_state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.methods_utils.submodular_optimizer.optimizer" [color="black", fontcolor="black", label=<{deepcore.methods.methods_utils.submodular_optimizer.optimizer|already_selected : list<br ALIGN="LEFT"/>args<br ALIGN="LEFT"/>budget : int<br ALIGN="LEFT"/>index<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"deepcore.methods.submodular.Submodular" [color="black", fontcolor="black", label=<{deepcore.methods.submodular.Submodular|balance : bool<br ALIGN="LEFT"/>embedding_dim<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>train_indx<br ALIGN="LEFT"/>|<I>after_epoch</I>()<br ALIGN="LEFT"/><I>after_loss</I>(outputs, loss, targets, batch_inds, epoch)<br ALIGN="LEFT"/><I>before_epoch</I>()<br ALIGN="LEFT"/><I>before_run</I>()<br ALIGN="LEFT"/><I>before_train</I>()<br ALIGN="LEFT"/>calc_gradient(index)<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.uncertainty.Uncertainty" [color="black", fontcolor="black", label=<{deepcore.methods.uncertainty.Uncertainty|balance : bool<br ALIGN="LEFT"/>epochs : int<br ALIGN="LEFT"/>selection_method : str<br ALIGN="LEFT"/>|<I>after_epoch</I>()<br ALIGN="LEFT"/><I>after_loss</I>(outputs, loss, targets, batch_inds, epoch)<br ALIGN="LEFT"/><I>before_epoch</I>()<br ALIGN="LEFT"/><I>before_run</I>()<br ALIGN="LEFT"/><I>before_train</I>()<br ALIGN="LEFT"/>finish_run()<br ALIGN="LEFT"/>num_classes_mismatch()<br ALIGN="LEFT"/>rank_uncertainty(index)<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>while_update(outputs, loss, targets, epoch, batch_idx, batch_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.methods.uniform.Uniform" [color="black", fontcolor="black", label=<{deepcore.methods.uniform.Uniform|balance : bool<br ALIGN="LEFT"/>index : ndarray<br ALIGN="LEFT"/>n_train<br ALIGN="LEFT"/>replace : bool<br ALIGN="LEFT"/>|select()<br ALIGN="LEFT"/>select_balance()<br ALIGN="LEFT"/>select_no_balance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.alexnet.AlexNet_224x224" [color="black", fontcolor="black", label=<{deepcore.nets.alexnet.AlexNet_224x224|embedding_recorder<br ALIGN="LEFT"/>fc : Linear, Sequential<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x: torch.Tensor): torch.Tensor<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.alexnet.AlexNet_32x32" [color="black", fontcolor="black", label=<{deepcore.nets.alexnet.AlexNet_32x32|embedding_recorder<br ALIGN="LEFT"/>fc : Linear<br ALIGN="LEFT"/>features : Sequential<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.BasicConv2d|bn : BatchNorm2d<br ALIGN="LEFT"/>conv : Conv2d<br ALIGN="LEFT"/>relu : ReLU<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.InceptionA" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.InceptionA|branch1x1<br ALIGN="LEFT"/>branch3x3 : Sequential<br ALIGN="LEFT"/>branch5x5 : Sequential<br ALIGN="LEFT"/>branchpool : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.InceptionB" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.InceptionB|branch3x3<br ALIGN="LEFT"/>branch3x3stack : Sequential<br ALIGN="LEFT"/>branchpool : MaxPool2d<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.InceptionC" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.InceptionC|branch1x1<br ALIGN="LEFT"/>branch7x7 : Sequential<br ALIGN="LEFT"/>branch7x7stack : Sequential<br ALIGN="LEFT"/>branch_pool : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.InceptionD" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.InceptionD|branch3x3 : Sequential<br ALIGN="LEFT"/>branch7x7 : Sequential<br ALIGN="LEFT"/>branchpool : AvgPool2d<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.InceptionE" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.InceptionE|branch1x1<br ALIGN="LEFT"/>branch3x3_1<br ALIGN="LEFT"/>branch3x3_2a<br ALIGN="LEFT"/>branch3x3_2b<br ALIGN="LEFT"/>branch3x3stack_1<br ALIGN="LEFT"/>branch3x3stack_2<br ALIGN="LEFT"/>branch3x3stack_3a<br ALIGN="LEFT"/>branch3x3stack_3b<br ALIGN="LEFT"/>branch_pool : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.InceptionV3_224x224" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.InceptionV3_224x224|Conv2d_1a_3x3<br ALIGN="LEFT"/>embedding_recorder<br ALIGN="LEFT"/>fc : Linear<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.inceptionv3.InceptionV3_32x32" [color="black", fontcolor="black", label=<{deepcore.nets.inceptionv3.InceptionV3_32x32|Conv2d_1a_3x3<br ALIGN="LEFT"/>Conv2d_2a_3x3<br ALIGN="LEFT"/>Conv2d_2b_3x3<br ALIGN="LEFT"/>Conv2d_3b_1x1<br ALIGN="LEFT"/>Conv2d_4a_3x3<br ALIGN="LEFT"/>Mixed_5b<br ALIGN="LEFT"/>Mixed_5c<br ALIGN="LEFT"/>Mixed_5d<br ALIGN="LEFT"/>Mixed_6a<br ALIGN="LEFT"/>Mixed_6b<br ALIGN="LEFT"/>Mixed_6c<br ALIGN="LEFT"/>Mixed_6d<br ALIGN="LEFT"/>Mixed_6e<br ALIGN="LEFT"/>Mixed_7a<br ALIGN="LEFT"/>Mixed_7b<br ALIGN="LEFT"/>Mixed_7c<br ALIGN="LEFT"/>avgpool : AdaptiveAvgPool2d<br ALIGN="LEFT"/>dropout : Dropout2d<br ALIGN="LEFT"/>embedding_recorder<br ALIGN="LEFT"/>linear : Linear<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.lenet.LeNet" [color="black", fontcolor="black", label=<{deepcore.nets.lenet.LeNet|embedding_recorder<br ALIGN="LEFT"/>fc_1 : Linear<br ALIGN="LEFT"/>fc_2 : Linear<br ALIGN="LEFT"/>fc_3 : Linear<br ALIGN="LEFT"/>features : Sequential<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.mlp.MLP" [color="black", fontcolor="black", label=<{deepcore.nets.mlp.MLP|embedding_recorder<br ALIGN="LEFT"/>fc_1 : Linear<br ALIGN="LEFT"/>fc_2 : Linear<br ALIGN="LEFT"/>fc_3 : Linear<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.mobilenetv3.InvertedResidual" [color="black", fontcolor="black", label=<{deepcore.nets.mobilenetv3.InvertedResidual|conv : Sequential<br ALIGN="LEFT"/>identity<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.mobilenetv3.MobileNetV3_224x224" [color="black", fontcolor="black", label=<{deepcore.nets.mobilenetv3.MobileNetV3_224x224|embedding_recorder<br ALIGN="LEFT"/>fc : Linear, Sequential<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.mobilenetv3.MobileNetV3_32x32" [color="black", fontcolor="black", label=<{deepcore.nets.mobilenetv3.MobileNetV3_32x32|avgpool : AdaptiveAvgPool2d<br ALIGN="LEFT"/>cfgs<br ALIGN="LEFT"/>classifier : Sequential<br ALIGN="LEFT"/>conv : Sequential<br ALIGN="LEFT"/>embedding_recorder<br ALIGN="LEFT"/>features : Sequential<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.mobilenetv3.SELayer" [color="black", fontcolor="black", label=<{deepcore.nets.mobilenetv3.SELayer|avg_pool : AdaptiveAvgPool2d<br ALIGN="LEFT"/>fc : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.mobilenetv3.h_sigmoid" [color="black", fontcolor="black", label=<{deepcore.nets.mobilenetv3.h_sigmoid|relu : ReLU6<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.mobilenetv3.h_swish" [color="black", fontcolor="black", label=<{deepcore.nets.mobilenetv3.h_swish|sigmoid<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.nets_utils.parallel.MyDataParallel" [color="black", fontcolor="black", label=<{deepcore.nets.nets_utils.parallel.MyDataParallel|no_grad : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" [color="black", fontcolor="black", label=<{deepcore.nets.nets_utils.recorder.EmbeddingRecorder|embedding<br ALIGN="LEFT"/>record_embedding : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.resnet.BasicBlock" [color="black", fontcolor="black", label=<{deepcore.nets.resnet.BasicBlock|bn1 : BatchNorm2d<br ALIGN="LEFT"/>bn2 : BatchNorm2d<br ALIGN="LEFT"/>conv1 : Conv2d<br ALIGN="LEFT"/>conv2 : Conv2d<br ALIGN="LEFT"/>expansion : int<br ALIGN="LEFT"/>shortcut : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.resnet.Bottleneck" [color="black", fontcolor="black", label=<{deepcore.nets.resnet.Bottleneck|bn1 : BatchNorm2d<br ALIGN="LEFT"/>bn2 : BatchNorm2d<br ALIGN="LEFT"/>bn3 : BatchNorm2d<br ALIGN="LEFT"/>conv1 : Conv2d<br ALIGN="LEFT"/>conv2 : Conv2d<br ALIGN="LEFT"/>conv3 : Conv2d<br ALIGN="LEFT"/>expansion : int<br ALIGN="LEFT"/>shortcut : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.resnet.ResNet_224x224" [color="black", fontcolor="black", label=<{deepcore.nets.resnet.ResNet_224x224|conv1 : Conv2d<br ALIGN="LEFT"/>embedding_recorder<br ALIGN="LEFT"/>fc : Linear<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.resnet.ResNet_32x32" [color="black", fontcolor="black", label=<{deepcore.nets.resnet.ResNet_32x32|bn1 : BatchNorm2d<br ALIGN="LEFT"/>conv1 : Conv2d<br ALIGN="LEFT"/>embedding_recorder<br ALIGN="LEFT"/>in_planes : int<br ALIGN="LEFT"/>layer1 : Sequential<br ALIGN="LEFT"/>layer2 : Sequential<br ALIGN="LEFT"/>layer3 : Sequential<br ALIGN="LEFT"/>layer4 : Sequential<br ALIGN="LEFT"/>linear : Linear<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.vgg.VGG_224x224" [color="black", fontcolor="black", label=<{deepcore.nets.vgg.VGG_224x224|embedding_recorder<br ALIGN="LEFT"/>fc : Linear, Sequential<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x: Tensor): Tensor<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.vgg.VGG_32x32" [color="black", fontcolor="black", label=<{deepcore.nets.vgg.VGG_32x32|channel<br ALIGN="LEFT"/>classifier : Linear<br ALIGN="LEFT"/>embedding_recorder<br ALIGN="LEFT"/>features : Sequential<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.wideresnet.BasicBlock" [color="black", fontcolor="black", label=<{deepcore.nets.wideresnet.BasicBlock|bn1 : BatchNorm2d<br ALIGN="LEFT"/>bn2 : BatchNorm2d<br ALIGN="LEFT"/>conv1 : Conv2d<br ALIGN="LEFT"/>conv2 : Conv2d<br ALIGN="LEFT"/>convShortcut<br ALIGN="LEFT"/>droprate : float<br ALIGN="LEFT"/>equalInOut<br ALIGN="LEFT"/>relu1 : ReLU<br ALIGN="LEFT"/>relu2 : ReLU<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.wideresnet.NetworkBlock" [color="black", fontcolor="black", label=<{deepcore.nets.wideresnet.NetworkBlock|layer : Sequential<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"deepcore.nets.wideresnet.WideResNet_32x32" [color="black", fontcolor="black", label=<{deepcore.nets.wideresnet.WideResNet_32x32|block1<br ALIGN="LEFT"/>block2<br ALIGN="LEFT"/>block3<br ALIGN="LEFT"/>bn1 : BatchNorm2d<br ALIGN="LEFT"/>conv1 : Conv2d<br ALIGN="LEFT"/>embedding_recorder<br ALIGN="LEFT"/>fc : Linear<br ALIGN="LEFT"/>nChannels : int<br ALIGN="LEFT"/>no_grad : bool<br ALIGN="LEFT"/>relu : ReLU<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>get_last_layer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"utils.AverageMeter" [color="black", fontcolor="black", label=<{utils.AverageMeter|avg : int<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>fmt : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>sum : int<br ALIGN="LEFT"/>val : int<br ALIGN="LEFT"/>|reset()<br ALIGN="LEFT"/>update(val, n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"utils.DataLoaderX" [color="black", fontcolor="black", label=<{utils.DataLoaderX|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"utils.WeightedSubset" [color="black", fontcolor="black", label=<{utils.WeightedSubset|dataset<br ALIGN="LEFT"/>indices<br ALIGN="LEFT"/>weights<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"deepcore.methods.cal.Cal" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.contextualdiversity.ContextualDiversity" -> "deepcore.methods.kcentergreedy.kCenterGreedy" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.craig.Craig" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.deepfool.DeepFool" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.earlytrain.EarlyTrain" -> "deepcore.methods.coresetmethod.CoresetMethod" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.forgetting.Forgetting" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.full.Full" -> "deepcore.methods.coresetmethod.CoresetMethod" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.glister.Glister" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.gradmatch.GradMatch" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.grand.GraNd" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.herding.Herding" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.kcentergreedy.kCenterGreedy" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.methods_utils.submodular_function.FacilityLocation" -> "deepcore.methods.methods_utils.submodular_function.SubmodularFunction" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.methods_utils.submodular_function.GraphCut" -> "deepcore.methods.methods_utils.submodular_function.SubmodularFunction" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.methods_utils.submodular_function.LogDeterminant" -> "deepcore.methods.methods_utils.submodular_function.SubmodularFunction" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.methods_utils.submodular_optimizer.ApproximateLazyGreedy" -> "deepcore.methods.methods_utils.submodular_optimizer.optimizer" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.methods_utils.submodular_optimizer.LazyGreedy" -> "deepcore.methods.methods_utils.submodular_optimizer.optimizer" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.methods_utils.submodular_optimizer.NaiveGreedy" -> "deepcore.methods.methods_utils.submodular_optimizer.optimizer" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.methods_utils.submodular_optimizer.StochasticGreedy" -> "deepcore.methods.methods_utils.submodular_optimizer.optimizer" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.submodular.Submodular" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.uncertainty.Uncertainty" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="empty", arrowtail="none"];
"deepcore.methods.uniform.Uniform" -> "deepcore.methods.coresetmethod.CoresetMethod" [arrowhead="empty", arrowtail="none"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionA" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch1x1", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionC" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch1x1", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch1x1", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3_1", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3_2a", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3_2b", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3stack_1", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3stack_2", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3stack_3a", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="branch3x3stack_3b", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Conv2d_1a_3x3", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Conv2d_2a_3x3", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Conv2d_2b_3x3", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Conv2d_3b_1x1", style="solid"];
"deepcore.nets.inceptionv3.BasicConv2d" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Conv2d_4a_3x3", style="solid"];
"deepcore.nets.inceptionv3.InceptionA" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_5b", style="solid"];
"deepcore.nets.inceptionv3.InceptionA" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_5c", style="solid"];
"deepcore.nets.inceptionv3.InceptionA" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_5d", style="solid"];
"deepcore.nets.inceptionv3.InceptionB" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_6a", style="solid"];
"deepcore.nets.inceptionv3.InceptionC" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_6b", style="solid"];
"deepcore.nets.inceptionv3.InceptionC" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_6c", style="solid"];
"deepcore.nets.inceptionv3.InceptionC" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_6d", style="solid"];
"deepcore.nets.inceptionv3.InceptionC" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_6e", style="solid"];
"deepcore.nets.inceptionv3.InceptionD" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_7a", style="solid"];
"deepcore.nets.inceptionv3.InceptionE" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_7b", style="solid"];
"deepcore.nets.inceptionv3.InceptionE" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Mixed_7c", style="solid"];
"deepcore.nets.mobilenetv3.h_sigmoid" -> "deepcore.nets.mobilenetv3.h_swish" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sigmoid", style="solid"];
"deepcore.nets.nets_utils.parallel.MyDataParallel" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"deepcore.nets.nets_utils.parallel.MyDataParallel" -> "deepcore.methods.earlytrain.EarlyTrain" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.alexnet.AlexNet_224x224" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.alexnet.AlexNet_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.inceptionv3.InceptionV3_224x224" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.inceptionv3.InceptionV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.lenet.LeNet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.mlp.MLP" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.mobilenetv3.MobileNetV3_224x224" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.mobilenetv3.MobileNetV3_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.resnet.ResNet_224x224" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.resnet.ResNet_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.vgg.VGG_224x224" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.vgg.VGG_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.nets_utils.recorder.EmbeddingRecorder" -> "deepcore.nets.wideresnet.WideResNet_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedding_recorder", style="solid"];
"deepcore.nets.wideresnet.NetworkBlock" -> "deepcore.nets.wideresnet.WideResNet_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block1", style="solid"];
"deepcore.nets.wideresnet.NetworkBlock" -> "deepcore.nets.wideresnet.WideResNet_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block2", style="solid"];
"deepcore.nets.wideresnet.NetworkBlock" -> "deepcore.nets.wideresnet.WideResNet_32x32" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block3", style="solid"];
}
